{{!-- next page button --}}
{{!--<div id="curated-list-button-holder">
    {{#if (greater termMap.page 1)}}
    <a id="prevLink" class=page-button>Previous Page</a>
    {{/if}}

    {{#if isNotEmpty}}
    <a id="nextLink" class=page-button>Next {{modelsPerPage}} Models</a>
    {{/if}}
</div>--}}

{{!-- Main sorting table  --}}
{{#if isNotEmpty}}
  <div id="curated-flex">
    {{!-- simple search --}}
    <div id="multi-search-div" class="left-inline">
      <div id="simple-search-left">
          <form id="custom-form-simple">
              <p id="json-filter-title"><b>Search</b></p>
              <input class="minimal-input" type="text" name="bmName" id="bmName" placeholder="Model Name" value="{{termMap.bmName}}" autocomplete="off">
              <select class="minimal-input" name="abstract-category" id="category-select" placeholder="Category" autocomplete="off">
                  <option disabled selected value>Category</option>
                  <option value="smoldyn">Curated</option>
                  <option value="fifv">Tutorials</option>
                  <option value="css">Education</option>
                  <option value="gibson">ModelBricks</option>
                  <option value="rg">All Public</option>
              </select>
              <button id="curated-search-submit-left" type="submit" class="minimal-button">
                  Search
              </button>
          </form>
      </div>
      {{!-- json filters --}}
      <form id="json-filters">
          <p id="json-filter-title"><b>Filter</b></p>
          <div class="custom-form__group">
            <input class="json-filter" type="checkbox" name="spatial" id="spatial" value="off">
            <label class="group__label" for="name">Spatial</label>
          </div>
          <div class="custom-form__group">
            <input class="json-filter" type="checkbox" name="stochastic" value="off">
            <label class="group__label" for="name">Stochastic</label>
          </div>
          <div class="custom-form__group">
            <input class="json-filter" type="checkbox" name="deterministic" value="off">
            <label class="group__label" for="name">Deterministic</label>
          </div>
          <div class="custom-form__group">
            <input class="json-filter" type="checkbox" name="image-based" value="off">
            <label class="group__label" for="name">Image-Based</label>
          </div>
          <div class="custom-form__group">
            <input class="json-filter" type="checkbox" name="analytic-geometry" value="off">
            <label class="group__label" for="name">Analytic-Geometry</label>
          </div>
          <div class="custom-form__group">
            <input class="json-filter" type="checkbox" name="assignment-rules" value="off">
            <label class="group__label" for="name">Assignment-Rules</label>
          </div>
          <div class="custom-form__group">
            <input class="json-filter" type="checkbox" name="events" value="off">
            <label class="group__label" for="name">Events</label>
          </div>
          <div class="custom-form__group">
            <input class="json-filter" type="checkbox" name="reaction-rules" value="off">
            <label class="group__label" for="name">Reaction-Rules</label>
          </div>
          <div class="custom-form__group">
            <input class="json-filter" type="checkbox" name="nfsim" value="off">
            <label class="group__label" for="name">NFSim</label>
          </div>
          <div class="custom-form__group">
            <input class="json-filter" type="checkbox" name="bionetgen" value="off">
            <label class="group__label" for="name">BioNetGen</label>
          </div>
          <select class="minimal-input" name="solver" id="solver" placeholder="Solver Name" autocomplete="off">
              <option disabled selected value>Filter by Solver</option>
              <option value="smoldyn">Smoldyn</option>
              <option value="fifv">Fully-Implicit Finite Volume</option>
              <option value="css">Combined Stiff Solver</option>
              <option value="gibson">Gibson</option>
              <option value="rg">Regular Grid</option>
          </select>
          <input class="minimal-input" type="text" name="text-filter" id="text-filter" placeholder="Filter by Text" autocomplete="off">
          <button type="button" class="minimal-button" id="form-filter">
              Filter
          </button>
      </form>
      {{!-- advanced search form  --}}
      <div class="left-inline minimal-border" id="advanced-search">
          <p id="json-filter-title"><b>Advanced</b></p>
          <form id="custom-form-advanced" class="">
              <div class="custom-form__group">
                  <p>Model ID</p>
                  <input class="minimal-input" type="text" name="bmId" id="bmId" placeholder="Model ID" value="{{termMap.bmId}}" autocomplete="off">
              </div>
              <div class="custom-form__group">
                  <p>Category</p>
                  <select class="minimal-input" name="category" id="category" placeholder="Category" value="{{termMap.category}}" autocomplete="off">
                      <option value="all">all</option>
                      <option value="public">public</option>
                      <option value="shared">shared</option>
                      <option value="mine">mine</option>
                      <option value="tutorials">tutorials</option>
                      <option value="educational">educational</option>
                  </select>
              </div>
              <div class="custom-form__group">
                  <p>Model Owner</p>
                  <input class="minimal-input" type="text" name="owner" id="owner" placeholder="Owner" value="{{termMap.owner}}">
              </div>
              <div class="custom-form__group">
                  <p>Modified After</p>
                  <input class="minimal-input" type="text" name="savedLow" id="savedLow" placeholder="Begin Time" value="{{termMap.savedLow}}" autocomplete="off">
              </div>
              <div class="custom-form__group">
                  <p>Modified Before</p>
                  <input class="minimal-input" type="text" name="savedHigh" id="savedHigh" placeholder="End Timestamp" value="{{termMap.savedHigh}}" autocomplete="off">
              </div>
              <div class="custom-form__group">
                  <p>Order By</p>
                  <select class="minimal-input" name="orderBy" id="orderBy" placeholder="orderBy" value="{{termMap.orderBy}}" autocomplete="off">
                      <option value="date_desc">Date (newest)</option>
                      <option value="date_asc">Date (oldest)</option>
                      <option value="name_asc">Name (A-Z)</option>
                      <option value="name_desc">Name (Z-A)</option>
                  </select>
              </div>
              <div class="custom-form__group">
                  <p>Models per Page</p>
                  <input class="minimal-input" type="text" name="maxModels" id="maxModels" placeholder="Models per Page" value="{{termMap.maxModels}}" autocomplete="off">
              </div>
              <button id="advanced-search-submit" type="submit" class="minimal-button">
                  Search
              </button>
          </form>
      </div>
    </div>
    <div class="curatedListTable left-table">
        <table id="content-table3" class="table-responsive-full sort-table curatedList">
            <thead>
                <tr>
                    <th class="composer">BioModel name
                        <div class="sort-table-arrows">
                            <a href="javascript:sort(true, 'composer', 'content-table3');"><button class="button"
                                    title="down arrow"><i class="fa fa-chevron-down"></i></button></a>
                            <a href="javascript:sort(false, 'composer', 'content-table3');"><button class="button"
                                    title="up arrow"><i class="fa fa-chevron-up"></i></button></a>
                        </div>
                    </th>
                    <th class="pubmed">Pubmed ID
                      {{!--<div class="sort-table-arrows">
                          <a href="javascript:sort(true, 'Pubmed', 'content-table3');"><button class="button"
                                  title="down arrow"><i class="fa fa-chevron-down"></i></button></a>
                          <a href="javascript:sort(false, 'Pubmed', 'content-table3');"><button class="button"
                                  title="up arrow"><i class="fa fa-chevron-up"></i></button></a>
                      </div>--}}
                    </th>
                    {{!-- disabled to save space
                    <th class="lyrics">Owner
                        <div class="sort-table-arrows">
                            <a href="javascript:sort(true, 'lyrics', 'content-table3');"><button class="button"
                                    title="down arrow"><i class="fa fa-chevron-down"></i></button></a>
                            <a href="javascript:sort(false, 'lyrics', 'content-table3');"><button class="button"
                                    title="up arrow"><i class="fa fa-chevron-up"></i></button></a>
                        </div>
                    </th>--}}
                    <th class="set">Saved
                        {{!--<div class="sort-table-arrows">
                            <a href="javascript:sort(true, 'set', 'content-table3');"><button class="button"
                                    title="down arrow"><i class="fa fa-chevron-down"></i></button></a>
                            <a href="javascript:sort(false, 'set', 'content-table3');"><button class="button"
                                    title="up arrow"><i class="fa fa-chevron-up"></i></button></a>
                        </div>--}}
                    </th>
                    <th class="applications">"Applications" - Simulations
                      <div class="sort-table-arrows">
                          <a href="javascript:sort(true, 'Applications', 'content-table3');"><button class="button"
                                  title="down arrow"><i class="fa fa-chevron-down"></i></button></a>
                          <a href="javascript:sort(false, 'Applications', 'content-table3');"><button class="button"
                                  title="up arrow"><i class="fa fa-chevron-up"></i></button></a>
                      </div>
                    </th>
                    <th style="display: none;">
                      {{!-- Hidden column used to get info for filtering --}}
                      Solver Name
                    </th>
                </tr>
            </thead>
            <tbody class="main-body">
                {{#each json}}
                <tr id="row{{@index}}" onclick="window.location = '/curatedList/model/{{this.bmKey}}#dashboard'" style="cursor: pointer">
                    <td data-label="Composer" class="composer" style="cursor: pointer;" onclick="window.location='/curatedList/model/{{this.bmKey}}#dashboard';">
                      <a href="/curatedList/model/{{this.bmKey}}#dashboard">
                        {{trimString this.name}}
                      </a>
                    </td>
                    <td data-label="Pubmed" class="Pubmed">
                      {{#if (getPubmedLink this.name)}}
                      <a href="{{getPubmedLink this.name}}">
                        {{~getPubmedID this.name~}}
                      </a>
                      {{else}}
                      <p>No Pubmed Link</p>
                      {{/if}}
                    </td>
                    {{!--<td data-label="Lyrics" class="lyrics">{{this.ownerName}}</td>--}}
                    <td data-label="Set" class="set">{{toDate this.savedDate}}</td>
                    <td data-label="Applications" class="Applications">
                      {{~#each this.simulations~}}
                      <b>"{{this.bioModelLink.simContextName}}"</b> - {{this.name}},&nbsp;
                      {{~/each~}}
                    </td>
                    <td style="display: none;">
                      {{!-- Hidden column used to get info for filtering --}}
                      {{#each this.simulations}}
                      {{this.solverName}}
                      {{/each}}
                    </td>
                </tr>
                {{/each}}
            </tbody>
        </table>
    </div>
  </div>

{{else}}
{{#if (eq page 1)}}
  <p id="list-empty">looks like there aren't any public models that match the given search terms.</p>
{{else}}
  <p id="list-empty">looks like there aren't any more public models that match the given search terms.</p>
{{/if}}
{{/if}}

{{!--<div id="curated-list-button-holder">
    {{#if (greater termMap.page 1)}}
    <a id="prevLink" class=page-button>Previous Page</a>
    {{/if}}

    {{#if isNotEmpty}}
    <a id="nextLink" class=page-button>Next {{modelsPerPage}} Models</a>
    {{/if}}
</div>--}}

{{!-- Script for Custom Form Submition Event --}}
<script>
    //make curated table correct size
    var jsonFilterDiv = document.getElementById('json-filters');
    var table = document.querySelector(".curatedListTable.left-table");
    let tableWidth = window.innerWidth - jsonFilterDiv.offsetWidth - 4;
    table.style.width = tableWidth.toString() + "px";
    //toggle simple vs advanced search
    //get elements
    var simple = document.getElementById("simple-search-left");
    var advanced = document.getElementById("advanced-search");
    var toggle = document.getElementById("toggle-advanced");
    var currentFormState = {{termMap.advanced}};
    let jsonFilterElms = document.querySelectorAll('.json-filter');
    let anySelectedFilter = false;
    let selectedFilters = new Set();
    //initialized in makeLink()
    let filters = {};
    let textFilters = {};

    //convert key val pair (from itr below) to format for url
    function convertPair(pair) {
      let a = pair[0];
      let b = pair[1];
      //remove dangerous chars
      if (typeof a == typeof '') {
        a.replace('=', '');
        a.replace('&', '');
      }
      if (typeof b == typeof '') {
        b.replace('=', '');
        b.replace('&', '');
      }
      return (pair[0] + '=' + pair[1]);
    }

    //simple on/off to true/false for use below
    function isOn(s) {
      if (s == 'on') {
        return true;
      }
      return false;
    }

    //change filter criteria in filters map
    function changeFilter(htmlElm, invert=false) {
      let phrase = htmlElm.name;
      let bool = htmlElm.checked;
      let literalPhrase = phrase.replace('-', ' ');
      //remove / add to selectedFilters
      if (bool) {
        selectedFilters.add(literalPhrase);
      } else {
        selectedFilters.delete(literalPhrase);
      }
      filters[literalPhrase] = bool;
      //if set is empty make anySelectedFilter false
      if (selectedFilters.size == 0) {
        anySelectedFilter = false;
      }
      return literalPhrase, phrase;
    }

    //to make links for next and prev buttons
    function makeLink(kind, advanced) {
      //get location
      old = window.location.href;
      //this is a bad implementation that requires attention whenever url changes
      //fix later
      old = old.replace('https://', '');
      old = old.replace('http://', '');
      old = old.replace('localhost:4002', '');
      old = old.replace('modelbricks.org', '');
      old = old.replace('model-bricks-testing.herokuapp.com', '');
      old = old.replace('/curatedList/', '');

      //make term map
      var terms = old.split("&");
      for (let i = 0; i < terms.length; i++) {
        terms[i] = terms[i].split("=");
      }
      var termMap = Object.fromEntries(terms);

      //fill entries
      if (kind == 'next') {
        termMap['page'] = parseInt(termMap['page']) + 1;
      } else {
        termMap['page'] = parseInt(termMap['page']) - 1;
      }
      termMap['advanced'] = advanced;
      //termMap['spatial'] = spatial;
      //repeat for all simulation search terms

      //assemble new link
      n = '';
      let keyValues = Object.entries(termMap);
      for (pair of keyValues) {
        n += convertPair(pair) + '&';
      }
      //remove tailing "&"
      n = n.slice(0, n.length - 1);

      //initilize map of filter phrases to usage boolean
      for (let i = 0; i < jsonFilterElms.length; i++) {
        let elm = jsonFilterElms[i];
        let literalPhrase, phrase = changeFilter(elm);
        if (isOn(termMap[phrase])) {
          filters[literalPhrase] = true;
        }
      }

      return (n);
    }

    //set initial disp conditions
    if (currentFormState) {
      simple.style.display = "flex";
      currentFormState = "true";
    } else {
      simple.style.display = "flex";
      currentFormState = "false";
    }

    //initialize links next and prev
    try {
      document.querySelectorAll("#nextLink").forEach((item, i) => {
        item.href = '/curatedList/' + makeLink('next', currentFormState);
      });
    } catch{}
    try {
      document.querySelectorAll("#prevLink").forEach((item, i) => {
        item.href = '/curatedList/' + makeLink('prev', currentFormState);
      });
    } catch{}

    //toggle funciton
    function toggleSearch() {
      if (currentFormState == "true") {
        simple.style.display = "flex";
        toggle.textContent = "Advanced Search";
        currentFormState = "false";
      } else {
        simple.style.display = "none";
        toggle.textContent = "Simple Search";
        currentFormState = "true";
      }
      //change links
      try {
        document.getElementById("nextLink").href = '/curatedList/' + makeLink('next', currentFormState);
      } catch{}
      try {
        document.getElementById("prevLink").href = '/curatedList/' + makeLink('prev', currentFormState);
      } catch{}
    }

    //when a json filter is selected
    function selectFilter(e) {
      anySelectedFilter = true;
      changeFilter(e.target, true);
    }

    //when search submit is pressed
    function whenPressed(e) {
      e.preventDefault();
      fd = new FormData(e.target);

      //get other form's data
      let otherForm = null;
      if (e.target.id == "custom-form-advanced") {
        otherForm = new FormData(document.getElementById('custom-form-simple'));
      } else if (e.target.id == "custom-form-simple") {
        otherForm = new FormData(document.getElementById('custom-form-advanced'));
      } else {
        console.log('Unrecognised search form id');
      }

      //add atributes not specified in simple search
      if (fd.get("bmId") == null) {
        fd.append("bmId","");
        fd.append("category","all");
        fd.append("savedLow","");
        fd.append("savedHigh","");
        fd.append("orderBy","date_desc");
        fd.append("maxModels","20");
      }
      //add other atributes
      fd.append("spatial", "off");
      fd.append("stochastic", "off");
      fd.append("deterministic", "off");
      fd.append("image-based", "off");
      fd.append("analytic-geometry", "off");
      fd.append("assignment-rules", "off");
      fd.append("events", "off");
      fd.append("reaction-rules", "off");
      fd.append("page","1");
      fd.append("owner","ModelBrick");//move this inside if statment if different owner search is enabled
      fd.append("advanced", currentFormState);

      //construct url params for resutls page
      const itr = fd.entries();
      const otherItr = otherForm.entries();
      let url = '';
      for (var pair of itr) {
        url += convertPair(pair) + '&';
      }
      for (var pair of otherItr) {
        url += convertPair(pair) + '&';
      }
      //remove tailing "&"
      url = url.slice(0, url.length - 1);

      //go to results page
      window.location.assign('/curatedList/' + url);
    }

    //create map of application html to its row obj
    let appRowMap = {};
    let modelTable = document.querySelector('tbody.main-body');
    let modelRows = modelTable.children;
    //loop thorugh rows to get application html
    for (let i = 0; i < modelRows.length; i++) {
      let row = modelRows[i];
      let datas = row.children;
      //app html is always in last td
      let secondLastData = datas[datas.length - 2];
      let lastData = datas[datas.length - 1];
      appRowMap[row.id] = lastData.innerHTML.toLowerCase() + secondLastData.innerHTML.toLowerCase();
    }

    //add solver phrase to filters
    function applySolverFilter(phrase) {
      if (phrase == "fifv") {
        //Fully-Implicit Finite Volume
        textFilters["fully"] = true;
        textFilters["implicit"] = true;
        textFilters["finite"] = true;
        textFilters["volume"] = true;
      } else if (phrase == "css") {
        //Combined Stiff Solver
        textFilters["combined"] = true;
        textFilters["stiff"] = true;
        textFilters["solver"] = true;
      } else if (phrase == "rg") {
        //Regular Grid
        textFilters["regular"] = true;
        textFilters["grid"] = true;
      } else if (phrase == "smoldyn") {
        //Smoldyn
        textFilters["smoldyn"] = true;
      } else if (phrase == "gibson") {
        //Gibson
        textFilters["gibson"] = true;
      }
    }

    //filter model table by application keywords
    function applicationFilter(e) {
      //get text filter to filters
      let textFilter = document.getElementById("text-filter");
      let textPhrase = textFilter.value.trim().toLowerCase();
      //get text filter to filters
      let solverFilter = document.getElementById("solver");
      let solverPhrase = null;
      for (let i = 0; i < solverFilter.options.length; i++) {
        let option = solverFilter.options[i];
        if (option.selected) {
          solverPhrase = option.value;
          break;
        }
      }
      //get all other filters
      let appRowMapKeyVals = Object.entries(appRowMap);
      if (anySelectedFilter || textPhrase.length > 0 || solverPhrase.length > 0) {
        //add text filters if they have been input, otherwise reset test filters
        if (textPhrase) {
          textFilters[textPhrase] = true;
        } else if (solverPhrase) {
          applySolverFilter(solverPhrase);
        } else {
          textFilters = {};
        }
        console.log(textFilters);
        let rowDispMap = {};
        //ket val map of union of filters and textFilters
        let filtersKeyVals = Object.entries(Object.assign({}, filters, textFilters));
        //iterate through rows
        for (let i = 0; i < appRowMapKeyVals.length; i++) {
          let pair = appRowMapKeyVals[i];
          let html = pair[1];
          let row = document.getElementById(pair[0]);
          let id = row.id;
          rowDispMap[id] = true;
          //for each filter, make rowDispMap
          for (let u = 0; u < filtersKeyVals.length; u++) {
            let filter = filtersKeyVals[u];
            let phrase = filter[0];
            let dashPhrase = phrase.replaceAll(' ', '-');
            let bool = filter[1];
            //if filter is on and application has phrase
            if (bool && (html.includes(phrase) || html.includes(dashPhrase))) {
              rowDispMap[id] = false;
            }
          }
        }
        //if row doesn't match filter, set display none
        for (let i = 0; i < appRowMapKeyVals.length; i++) {
          let pair = appRowMapKeyVals[i];
          let row = document.getElementById(pair[0]);
          let decision = rowDispMap[row.id];
          if (decision) {
            row.style.display = 'none';
          } else {
            row.style.display = 'table-row';
          }
        }
      } else {
        //if no selected filters, make all rows visable
        for (let i = 0; i < appRowMapKeyVals.length; i++) {
          let pair = appRowMapKeyVals[i];
          document.getElementById(pair[0]).style.display = 'table-row';
        };
      }
    }

    //custom event listners for form submition
    const simpleForm = document.getElementById("custom-form-simple");
    const advancedForm = document.getElementById("custom-form-advanced");
    const filterButton = document.getElementById('form-filter');

    //apply listerners
    simpleForm.addEventListener("submit", (e) => {whenPressed(e);});
    advancedForm.addEventListener("submit", (e) => {whenPressed(e);});
    jsonFilterElms.forEach((item) => {
      item.addEventListener('input', (e) => {selectFilter(e);});
    });
    filterButton.addEventListener('click', (e) => {
      e.preventDefault();
      applicationFilter(e);
    });

</script>
