{{!-- Main sorting table  --}}
<div id="curated-flex">
  {{!-- simple search --}}
  <div id="multi-search-div" class="left-inline">
    <div id="simple-search-left">
        <form id="custom-form-simple">
            <p id="json-filter-title"><b>Search</b></p>
            <input class="minimal-input" type="text" name="bmName" id="bmName" placeholder="Model Name" value="{{termMap.bmName}}" autocomplete="off">
            <select class="minimal-input" name="category" id="category-select" placeholder="Category" autocomplete="off">
                <option {{#if (eq termMap.category "tutorial")}}selected {{/if}}value="tutorial">Tutorials</option>
                <option {{#if (eq termMap.category "education")}}selected {{/if}}value="education">Education</option>
                <option {{#if (or (eq termMap.owner "ModelBrick") (eq termMap.category modelbricks))}}selected {{/if}}value="modelbrick">ModelBricks</option>
                <option {{#if (and (eq termMap.category "all") (not (eq termMap.owner "ModelBrick")))}}selected {{/if}}value="all">All Public</option>
                <option {{#if (eq termMap.category "curated")}}selected {{/if}}value="curated">Curated</option>
                <option {{#if (eq termMap.category "publications")}}selected {{/if}}value="publications">Publications</option>
            </select>
            <input class="minimal-input" type="text" name="owner" id="owner" placeholder="Owner" value="">
            <button id="curated-search-submit-left" type="submit" class="minimal-button">
                Search
            </button>
        </form>
    </div>
    {{!-- json filters --}}
    <form id="json-filters">
        <p id="json-filter-title"><b>Filter</b></p>
        <select class="minimal-input" name="filter" id="filter-select" placeholder="Filter by Feature" autocomplete="off">
            <option class="grey-text" selected value="none">Filter by Feature</option>
            <option value="spatial">Spatial</option>
            <option value="stochastic">Stochastic</option>
            <option value="deterministic">Deterministic</option>
            <option value="image-based">Image Based</option>
            <option value="analytic-geometry">Analytic Geometry</option>
            <option value="assignment-rules">Assignment Rules</option>
            <option value="events">Events</option>
            <option value="reaction-rules">Reaction Rules</option>
            <option value="nfsim">NFSim</option>
            <option value="bionetgen">BioNetGen</option>
        </select>
        <select class="minimal-input" name="solver" id="solver" placeholder="Solver Name" autocomplete="off">
            <option disabled selected value>Filter by Solver</option>
            <option value="smoldyn">Smoldyn</option>
            <option value="fifv">Fully-Implicit Finite Volume</option>
            <option value="css">Combined Stiff Solver</option>
            <option value="gibson">Gibson</option>
            <option value="rg">Regular Grid</option>
        </select>
        <input class="minimal-input" type="text" name="text-filter" id="text-filter" placeholder="Filter by Text" autocomplete="off">
        <button type="button" class="minimal-button" id="form-filter">
            Filter
        </button>
    </form>
    {{!-- advanced search form  --}}
    <div class="left-inline minimal-border" id="advanced-search">
        <p id="json-filter-title"><b>Advanced</b></p>
        <form id="custom-form-advanced" class="">
            <div class="custom-form__group">
                <p>Model ID</p>
                <input class="minimal-input" type="text" name="bmId" id="bmId" placeholder="Model ID" value="{{termMap.bmId}}" autocomplete="off">
            </div>
            <div class="custom-form__group">
                <p>Modified After / Before</p>
                <input class="minimal-input-inline" type="text" name="savedLow" id="savedLow" placeholder="Begin Time" value="{{termMap.savedLow}}" autocomplete="off">
                <input class="minimal-input-inline" type="text" name="savedHigh" id="savedHigh" placeholder="End Timestamp" value="{{termMap.savedHigh}}" autocomplete="off">
            </div>
            <div class="custom-form__group">
                <p>Order By</p>
                <select class="minimal-input" name="orderBy" id="orderBy" placeholder="orderBy" value="{{termMap.orderBy}}" autocomplete="off">
                    <option value="date_desc">Date (newest)</option>
                    <option value="date_asc">Date (oldest)</option>
                    <option value="name_asc">Name (A-Z)</option>
                    <option value="name_desc">Name (Z-A)</option>
                </select>
            </div>
            <div class="custom-form__group">
                <p>Models per Page</p>
                <input class="minimal-input" type="text" name="maxModels" id="maxModels" placeholder="Models per Page" value="{{termMap.maxModels}}" autocomplete="off">
            </div>
            {{!--<button id="advanced-search-submit" type="submit" class="minimal-button">
                Search
            </button>--}}
        </form>
    </div>
    {{!-- next/prev page button --}}
    <div id="curated-list-button-holder">
        {{#if (greater termMap.page 1)}}
        <a id="prevLink" class="page-button">Previous Page</a>
        {{/if}}

        {{#if isNotEmpty}}
        <a id="nextLink" class="page-button">Next {{modelsPerPage}} Models</a>
        {{/if}}
    </div>
  </div>
{{#if isNotEmpty}}
    <div class="curatedListTable left-table">
        <table id="content-table3" class="table-responsive-full sort-table curatedList">
            <thead>
                <tr>
                    <th class="curated-list-bm-name">BioModel name
                        <div class="sort-table-arrows">
                            <a href="javascript:sort(true, 'curated-list-bm-name', 'content-table3', true);"><button class="button"
                                    title="down arrow"><i class="fa fa-chevron-down"></i></button></a>
                            <a href="javascript:sort(false, 'curated-list-bm-name', 'content-table3', true);"><button class="button"
                                    title="up arrow"><i class="fa fa-chevron-up"></i></button></a>
                        </div>
                    </th>
                    <th class="owner">
                      Owner
                      <div class="sort-table-arrows">
                          <a href="javascript:sort(true, 'owner', 'content-table3', true);"><button class="button"
                                  title="down arrow"><i class="fa fa-chevron-down"></i></button></a>
                          <a href="javascript:sort(false, 'owner', 'content-table3', true);"><button class="button"
                                  title="up arrow"><i class="fa fa-chevron-up"></i></button></a>
                      </div>
                    </th>
                    <th class="pubmed">Pubmed ID
                      <div class="sort-table-arrows">
                          <a href="javascript:sort(true, 'pubmed', 'content-table3', true);"><button class="button"
                                  title="down arrow"><i class="fa fa-chevron-down"></i></button></a>
                          <a href="javascript:sort(false, 'pubmed', 'content-table3', true);"><button class="button"
                                  title="up arrow"><i class="fa fa-chevron-up"></i></button></a>
                      </div>
                    </th>
                    {{!-- disabled to save space
                    <th class="lyrics">Owner
                        <div class="sort-table-arrows">
                            <a href="javascript:sort(true, 'lyrics', 'content-table3');"><button class="button"
                                    title="down arrow"><i class="fa fa-chevron-down"></i></button></a>
                            <a href="javascript:sort(false, 'lyrics', 'content-table3');"><button class="button"
                                    title="up arrow"><i class="fa fa-chevron-up"></i></button></a>
                        </div>
                    </th>--}}
                    <th class="date">Saved
                        <div class="sort-table-arrows">
                            <a href="javascript:sort(true, 'date', 'content-table3', true);"><button class="button"
                                    title="down arrow"><i class="fa fa-chevron-down"></i></button></a>
                            <a href="javascript:sort(false, 'date', 'content-table3', true);"><button class="button"
                                    title="up arrow"><i class="fa fa-chevron-up"></i></button></a>
                        </div>
                    </th>
                    <th class="applications/solvers">"Applications" - Sims / Solver Name
                    </th>
                </tr>
            </thead>
            <tbody class="main-body">
                {{#each json}}
                <tr id="row{{@index}}" class="sortable-row" style="cursor: pointer">
                    <td onclick="window.location = '/curatedList/model/{{this.bmKey}}#dashboard'" data-label="curated-list-bm-name" class="curated-list-bm-name" style="cursor: pointer;" onclick="window.location='/curatedList/model/{{this.bmKey}}#dashboard';">
                      <a href="/curatedList/model/{{this.bmKey}}#dashboard">
                        {{shortString (trimString this.name) 45 false}}
                      </a>
                    </td>
                    <td class="owner" onclick="window.location = '/curatedList/model/{{this.bmKey}}#dashboard'">
                      {{this.ownerName}}
                    </td>
                    <td onclick="window.location = '/curatedList/model/{{this.bmKey}}#dashboard'" data-label="pubmed" class="pubmed">
                      {{#if (getPubmedLink (getPubmedID this.name this.pubmedid))}}
                      <a href="{{getPubmedLink (getPubmedID this.name this.pubmedid)}}">
                        {{~getPubmedID this.name this.pubmedid~}}
                      </a>
                      {{else}}
                      <p>None</p>
                      {{/if}}
                    </td>
                    <td onclick="window.location = '/curatedList/model/{{this.bmKey}}#dashboard'" data-label="date" class="date">{{toDate this.savedDate}}</td>
                    {{!-- We need some wacky nested table stuff for the applications, solvers column --}}
                    <td class="app-sim-td no-margin" id="app-sim-td{{@key}}">
                      <table id="short{{@key}}" class="pulldown abreviated-text">
                        <tbody name="short.{{@key}}">
                          <tr name="short.{{@key}}">
                            <td name="short.{{@key}}" class="right-border">
                              <div name="short.{{@key}}">
                                  {{#if (greater this.simulations.length 0)}}
                                  {{shortString this.simulations.[0].bioModelLink.simContextName 20}}
                                  <i name="short.{{@key}}" class="fa fa-chevron-down"></i>
                                  {{/if}}
                              </div>
                            </td>
                            <td name="short.{{@key}}" class="left-border">
                              <div name="short.{{@key}}">
                                  {{#if (greater this.simulations.length 0)}}
                                  {{shortString this.simulations.[0].solverName 30}}
                                  {{/if}}
                              </div>
                            </td>
                          </tr>
                        </tbody>
                      </table>
                      <table id="full{{@key}}" class="pulldown full-text">
                        <tbody name="full.{{@key}}">
                          {{#each this.simulations}}
                          <tr name="full.{{@../key}}">
                            <td name="full.{{@../key}}" class="right-border">
                              <div name="full.{{@../key}}">
                                  <b name="full.{{@../key}}">
                                    "{{this.bioModelLink.simContextName}}"
                                  </b> - {{this.name}}
                                  {{!--<br name="app.{{@../key}}">--}}
                              </div>
                            </td>
                            <td name="full.{{@../key}}" class="left-border">
                              <div name="full.{{@../key}}">
                                {{this.solverName}}
                                {{!--<br name="solv.{{@../key}}">--}}
                              </div>
                            </td>
                          </tr>
                          {{/each}}
                        </tbody>
                      </table>
                    </td>
                    {{!--<td name="solv.{{@key}}" data-label="Solvers" class="Solvers pulldown">
                      <div name="solv.{{@key}}" id="solvAbv{{@key}}" class="abreviated-text">
                          {{#if (greater this.simulations.length 0)}}
                          {{shortString this.simulations.[0].solverName 35}}
                          <i name="solv.{{@key}}" class="fa fa-chevron-down"></i>
                          {{/if}}
                      </div>
                      <div name="solv.{{@key}}" id="solvFul{{@key}}" class="full-text">
                        {{#each this.simulations}}
                        {{this.solverName}}
                        <br name="solv.{{@../key}}">
                        {{/each}}
                      </div>
                    </td>--}}
                </tr>
                {{/each}}
            </tbody>
        </table>
        {{!-- next/prev page button --}}
        <div id="curated-list-button-holder">
            {{#if (greater termMap.page 1)}}
            <a id="prevLink" class="page-button">Previous Page</a>
            {{/if}}

            {{#if isNotEmpty}}
            <a id="nextLink" class="page-button">Next {{modelsPerPage}} Models</a>
            {{/if}}
        </div>
    </div>
    {{else}}
    {{#if (eq page 1)}}
      <p id="list-empty">looks like there aren't any public models that match the given search terms.</p>
    {{else}}
      <p id="list-empty">looks like there aren't any more public models that match the given search terms.</p>
    {{/if}}
    {{/if}}
  </div>

{{!-- Script for Custom Form Submition Event --}}
<script>
    //make curated table correct size
    var jsonFilterDiv = document.getElementById('json-filters');
    var table = document.querySelector(".curatedListTable.left-table");
    function resizeTable() {
      if (table) {
        let tableWidth = window.innerWidth - jsonFilterDiv.offsetWidth - 4;
        table.style.width = tableWidth.toString() + "px";
      }
    }
    resizeTable();
    window.onresize = resizeTable;
    //toggle simple vs advanced search
    //get elements
    var simple = document.getElementById("simple-search-left");
    var advanced = document.getElementById("advanced-search");
    var toggle = document.getElementById("toggle-advanced");
    let anySelectedFilter = false;
    let selectedFilters = new Set();
    //initialized in makeLink()
    let filters = {};
    let textFilters = {};

    //convert key val pair (from itr below) to format for url
    function convertPair(pair) {
      let a = pair[0];
      let b = pair[1];
      //remove dangerous chars
      if (typeof a == typeof '') {
        a.replace('=', '');
        a.replace('&', '');
      }
      if (typeof b == typeof '') {
        b.replace('=', '');
        b.replace('&', '');
      }
      return (pair[0] + '=' + pair[1]);
    }

    //simple on/off to true/false for use below
    function isOn(s) {
      if (s == 'on') {
        return true;
      }
      return false;
    }

    //class to organize all filters
    class FilterContainer {
      constructor () {
        this.solverName = null;
        this.feature = null;
        this.text = null;
      }
    }
    let filterContainer = new FilterContainer();

    //change feature filter criteria in filters map
    function changeFilter(htmlElm, invert=false) {
      filters = {};
      selectedFilters.clear();
      let phrase = htmlElm.value;
      let bool = true;//htmlElm.checked;
      let literalPhrase = phrase.replace('-', ' ');
      //remove / add to selectedFilters
      if (bool) {
        selectedFilters.add(literalPhrase);
        //filterContainer.feature.add(literalPhrase);
      } else {
        selectedFilters.delete(literalPhrase);
        //filterContainer.feature.delete(literalPhrase);
      }
      filters[literalPhrase] = bool;
      //if set is empty make anySelectedFilter false
      if (selectedFilters.size == 0) {
        anySelectedFilter = false;
      }
      if (phrase == "none") {
        filters = {};
        anySelectedFilter = false;
      }
      return literalPhrase, phrase;
    }

    //to make links for next and prev buttons
    function makeLink(kind, advanced) {
      //get location
      old = window.location.href;
      //this is a bad implementation that requires attention whenever url changes
      //fix later
      old = old.replace('https://', '');
      old = old.replace('http://', '');
      old = old.replace('localhost:4002', '');
      old = old.replace('modelbricks.org', '');
      old = old.replace('model-bricks-testing.herokuapp.com', '');
      old = old.replace('/curatedList/', '');

      //make term map
      var terms = old.split("&");
      for (let i = 0; i < terms.length; i++) {
        terms[i] = terms[i].split("=");
      }
      var termMap = Object.fromEntries(terms);

      //fill entries
      if (kind == 'next') {
        termMap['page'] = parseInt(termMap['page']) + 1;
      } else {
        termMap['page'] = parseInt(termMap['page']) - 1;
      }

      //assemble new link
      n = '';
      let keyValues = Object.entries(termMap);
      for (pair of keyValues) {
        n += convertPair(pair) + '&';
      }
      //remove tailing "&"
      n = n.slice(0, n.length - 1);

      //initilize map of filter phrases to usage boolean
      /*for (let i = 0; i < jsonFilterElms.length; i++) {
        let elm = jsonFilterElms[i];
        let literalPhrase, phrase = changeFilter(elm);
        if (isOn(termMap[phrase])) {
          filters[literalPhrase] = true;
        }
      }*/

      return (n);
    }

    //initialize links next and prev
    try {
      document.querySelectorAll("#nextLink").forEach((item, i) => {
        item.href = '/curatedList/' + makeLink('next', true);
      });
    } catch(e){console.log(e);}
    try {
      document.querySelectorAll("#prevLink").forEach((item, i) => {
        item.href = '/curatedList/' + makeLink('prev', true);
      });
    } catch{}

    //toggle funciton
    function toggleSearch() {
      //change links
      try {
        document.getElementById("nextLink").href = '/curatedList/' + makeLink('next', currentFormState);
      } catch{}
      try {
        document.getElementById("prevLink").href = '/curatedList/' + makeLink('prev', currentFormState);
      } catch{}
    }

    //when a feature filter is selected
    function selectFilter(e) {
      anySelectedFilter = true;
      changeFilter(e.target, true);
    }

    //when search submit is pressed
    function whenPressed(e) {
      e.preventDefault();
      fd = new FormData(e.target);

      //get other form's data
      let otherForm = null;
      if (e.target.id == "custom-form-advanced") {
        otherForm = new FormData(document.getElementById('custom-form-simple'));
      } else if (e.target.id == "custom-form-simple") {
        otherForm = new FormData(document.getElementById('custom-form-advanced'));
      } else {
        console.log('Unrecognised search form id');
      }

      //add other atributes
      fd.append("page","1");
      //handle special modlebricks + publicantions category cases
      if (fd.get('category') == 'modelbrick' || otherForm.get('category') == 'modelbrick') {
        fd.set('category', 'all');
        otherForm.set('owner', 'ModelBrick');
      }

      //construct url params for resutls page
      const itr = fd.entries();
      const otherItr = otherForm.entries();
      let url = '';
      for (var pair of itr) {
        url += convertPair(pair) + '&';
      }
      for (var pair of otherItr) {
        url += convertPair(pair) + '&';
      }
      //remove tailing "&"
      url = url.slice(0, url.length - 1);

      //go to results page
      window.location.assign('/curatedList/' + url);
    }

    //create map of application html to its row obj
    let appRowMap = {};
    //get the json string and decode the html entities in the string
    var txt = document.createElement("textarea");
    txt.innerHTML = "{{jsonString}}";
    let jsonString = txt.value.replaceAll("&apos;", "'").replaceAll("\n", "");
    //put data into row map
    let jsonList = JSON.parse(jsonString);
    for (let i = 0; i < jsonList.length; i++) {
      appRowMap["row" + i] = JSON.stringify(jsonList[i]);
    }

    //add solver phrase to filters
    function applySolverFilter(phrase) {
      if (phrase == "fifv") {
        //Fully-Implicit Finite Volume
        return "Fully-Implicit Finite Volume";
      } else if (phrase == "css") {
        //Combined Stiff Solver
        return "Combined Stiff Solver";
      } else if (phrase == "rg") {
        //Regular Grid
        return "Regular Grid";
      } else if (phrase == "smoldyn") {
        //Smoldyn
        return "Smoldyn";
      } else if (phrase == "gibson") {
        //Gibson
        return "Gibson";
      }
    }

    //string.includes function but for array, used in applicationFilter
    function includesEach(string, array) {
      for (let i = 0; i < array.length; i++) {
        if (!string.includes(array[i])) {
          return false;
        }
      }
      return true;
    }

    //filter model table by application keywords
    function applicationFilter(e) {
      //reset vars
      let finalFilters = [];
      textFilters = {};
      //get text filter to filters
      let textFilter = document.getElementById("text-filter");
      let textPhrase = textFilter.value.trim();
      //get text filter to filters
      let solverFilter = document.getElementById("solver");
      let solverPhrase = null;
      for (let i = 0; i < solverFilter.options.length; i++) {
        let option = solverFilter.options[i];
        if (option.selected) {
          solverPhrase = option.value;
          break;
        }
      }
      //get all other filters
      let appRowMapKeyVals = Object.entries(appRowMap);
      if (anySelectedFilter || textPhrase.length > 0 || solverPhrase.length > 0) {
        //add text filters if they have been input, otherwise reset test filters
        if (textPhrase) {
          textFilters[textPhrase] = true;
          finalFilters.push(textPhrase);
        }
        if (solverPhrase) {
          let output = applySolverFilter(solverPhrase);
          textFilters[output] = true;
          finalFilters.push(output);
        }
        let filterKeys = Object.keys(filters);
        if (filterKeys.length != 0) {
          finalFilters.push(filterKeys[0]);
        }
        if (!solverPhrase && !textPhrase) {
          textFilters = {};
        }
        let rowDispMap = {};
        //ket val map of union of filters and textFilters
        let filtersKeyVals = Object.entries(Object.assign({}, filters, textFilters));
        //iterate through rows
        for (let i = 0; i < appRowMapKeyVals.length; i++) {
          let pair = appRowMapKeyVals[i];
          let html = pair[1];
          let row = document.getElementById(pair[0]);
          let id = row.id;
          rowDispMap[id] = true;
          //if html does not have all filter phrases mark to remove later
          if (includesEach(html, finalFilters)) {
            rowDispMap[id] = false;
          }
        }
        console.log(finalFilters, rowDispMap);
        //if row doesn't match filter, set display none
        for (let i = 0; i < appRowMapKeyVals.length; i++) {
          let pair = appRowMapKeyVals[i];
          let row = document.getElementById(pair[0]);
          let decision = rowDispMap[row.id];
          if (decision) {
            row.style.display = 'none';
          } else {
            row.style.display = 'table-row';
          }
        }
      } else {
        //if no selected filters, make all rows visable
        for (let i = 0; i < appRowMapKeyVals.length; i++) {
          let pair = appRowMapKeyVals[i];
          document.getElementById(pair[0]).style.display = 'table-row';
        };
      }
    }

    //toggle pulldown menus in curated list table
    function togglePulldown(e) {
      //get elements from toggle code stored in html "name" atribute
      let toggleCode = e.target.getAttribute("name");
      toggleCode = toggleCode.split('.');
      let abvCode = 'short' + toggleCode[1];
      let fullCode = 'full' + toggleCode[1];
      let abv = document.getElementById(abvCode);
      let full = document.getElementById(fullCode);
      //toggle display of abv and full
      if (abv.style.display == 'none') {
        abv.style.display = 'block';
        full.style.display = 'none';
      } else {
        abv.style.display = 'none';
        full.style.display = 'block';
      }
    }

    //open any app/sim cells that are only one line when expanded
    function openExpandable(td) {
      //find number of lines of expanded cell
      let id = td.id
      let fullTable = document.querySelector("#" + id + " > table.full-text");
      let shortTable = document.querySelector("#" + id + " > table.abreviated-text");
      let tbody = fullTable.children[0];
      let rows = tbody.children;
      if (rows.length == 1) {
        fullTable.style.display = 'block';
        shortTable.style.display = 'none';
      }
    }

    //custom event listners for form submition
    const appSimCells = document.querySelectorAll(".app-sim-td");
    const simpleForm = document.getElementById("custom-form-simple");
    const advancedForm = document.getElementById("custom-form-advanced");
    const filterButton = document.getElementById('form-filter');
    const pulldowns = document.querySelectorAll(".pulldown");
    //used for feature filter
    const filterSelect = document.getElementById("filter-select");

    //apply listerners
    simpleForm.addEventListener("submit", (e) => {whenPressed(e);});
    advancedForm.addEventListener("submit", (e) => {whenPressed(e);});
    //used for feature filter
    filterSelect.addEventListener("change", (e) => {
      selectFilter(e);
    });
    /*jsonFilterElms.forEach((item) => {
      item.addEventListener('input', (e) => {selectFilter(e);});
    });*/
    pulldowns.forEach((item) => {
      item.addEventListener('click', (e) => {togglePulldown(e);});
    });
    appSimCells.forEach((item) => {
      openExpandable(item);
    });
    filterButton.addEventListener('click', (e) => {
      e.preventDefault();
      applicationFilter(e);
    });


</script>
